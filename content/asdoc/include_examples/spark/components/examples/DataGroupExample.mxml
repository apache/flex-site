<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<!-- Simple example to demonstrate the Spark DataGroup component -->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx">

    <fx:Script>
        <![CDATA[
            // need to import the item renderers
            import spark.skins.spark.DefaultItemRenderer;
            import spark.skins.spark.DefaultComplexItemRenderer;
            import spark.components.Button;

            public function customItemRendererFunction(item:*):IFactory {
                if (item is Button) {
                    return new ClassFactory(DefaultComplexItemRenderer);
                } else {
                    return new ClassFactory(DefaultItemRenderer);
                }
            }
        ]]>
    </fx:Script>

    <s:Panel title="DataGroup Component Example"
            width="75%" height="75%" 
            horizontalCenter="0" verticalCenter="0">
        <s:VGroup left="10" right="10" top="10" bottom="10">
            <!-- A DataGroup can hold primitive data items if an 
                 item renderer is defined. -->
            <s:DataGroup itemRenderer="spark.skins.spark.DefaultItemRenderer">
                <s:layout>
                    <s:VerticalLayout gap="1" />
                </s:layout>
                <s:dataProvider>
                    <s:ArrayCollection>
                        <fx:String>primitive data 1</fx:String>
                        <fx:String>primitive data 2</fx:String>
                        <fx:String>primitive data 3</fx:String>
                    </s:ArrayCollection>
                </s:dataProvider>
            </s:DataGroup>

            <mx:Spacer height="20" />

            <!-- An item renderer function can be defined in order to display 
                 a mix of data and graphical items. -->
            <s:DataGroup itemRendererFunction="customItemRendererFunction">
                <s:layout>
                    <s:HorizontalLayout gap="1" />
                </s:layout>
                <s:dataProvider>
                    <s:ArrayCollection>
                        <s:Button label="Button 1" />
                        <fx:String>primitive data string</fx:String>
                        <s:Button label="Button 2" />
                    </s:ArrayCollection>
                </s:dataProvider>
            </s:DataGroup>
        </s:VGroup>
    </s:Panel>

</s:Application>
